params{
  outdir = '120721output'
  mode = "all" // all
  bin = "/home/kpettie/code/github/selection_1000G"
  hornet_code = "/home/kpettie/code/Hornet_public/mapping"
  fastq_local_glob = "/godot/shared_data/ashley_ATACseqData/fastqs/combined_runs/*.fastq.gz" // "" to get from SRA, but FTP with fromSRA nextflow function currently truncates large files
  sra_id = "PRJNA383900" // https://doi.org/10.7554/eLife.39595
  sra_api_key = "717e973050a072c8f605635450151d576307" // https://www.ncbi.nlm.nih.gov/account/settings (allows up to 10 requests/second instead of 3)
  urlroot = "https://www.ncbi.nlm.nih.gov/sra/?term="
  urlfull = urlroot + sra_id

  atac_glob = "{CEU,FIN,IBS,TSI,ESN,GWD,LWK,YRI}"
  group_regex = [ '/(ESN|GWD|LWK|YRI)/',
                  '/(CEU|FIN|IBS|TSI)/' ]
  group_names = [ 'AFR',
                  'EUR' ]
  bt2_idx_prefix = "/godot/shared_data/hg19/hg19"
  bt2_opts = "-N 1 -L 20 -X 2000 --end-to-end --np 0 --n-ceil L,0,0.15"
  mapcores = 32
  mapq = 5
  vcf_dir = "/godot/shared_data/1000genomes/1000GP_Phase3" // ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ (if not pre-downloaded)
  vcf_stem = "ALL.chr*.phase3_*integrated_v*.20130502.genotypes.vcf.gz"
  samcores = 16
}

process{
  module = 'anaconda/4.8' // must have cutadapt installed
  errorStrategy = 'finish'
  maxForks = 200
  stageInMode = 'rellink'
  cpus = 1
  memory = '4G'
  time  = '2h'
  withLabel: 'cutadapt'{
    cpus = params.samcores
    memory = params.samcores*4 + 'G'
    time = '8h'
  }
  withLabel: 'map'{
    module = 'samtools:bowtie2'
    cpus = params.mapcores
    memory = params.mapcores*4 + 'G'
    time  = '24h'
  }
  withLabel: 'rmdup'{
    module = 'samtools:picard/2.18.20'
    cpus = 1
    memory = '4G'
    time  = '8h'
  }
  withLabel: 'snps'{
    cpus = 1
    memory = '10G'
    time  = '2h'
  }
  withLabel: 'intersecting'{
    cpus = 1
    memory = '20G'
    time  = '30h'
  }
  withLabel: 'filter'{
    cpus = 1
    memory = '16G'
    time  = '23h'
  }
  withLabel: 'samtools'{
    module = 'samtools'
    cpus = params.samcores
    memory = params.samcores*4 + 'G'
    time  = '8h'
  }

}

executor{
  name = 'slurm'
  submitRateLimit = '1 sec'
  queueSize = 500
}

notification{
  enabled = true
  to = 'kpettie@stanford.edu'
}

timeline {
    enabled = true
    file = "./pipeline_info/timeline.html"
}

trace {
    enabled = true
    file = "./pipeline_info/trace.txt"
}

report {
    enabled = true
    file = "./pipeline_info/report.html"
}
